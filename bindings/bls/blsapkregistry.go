// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bls

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSApkRegistryPubKeyRegistrationParams is an auto generated low-level Go binding around an user-defined struct.
type IBLSApkRegistryPubKeyRegistrationParams struct {
	PubKeyG1 BN254G1Point
	PubKeyG2 BN254G2Point
	Sigma    BN254G1Point
}

// IBLSApkRegistrySignatureCheckParams is an auto generated low-level Go binding around an user-defined struct.
type IBLSApkRegistrySignatureCheckParams struct {
	NonSignerPubKeysG1 []BN254G1Point
	ApkG2              BN254G2Point
	Sigma              BN254G1Point
	TotalEthStake      *big.Int
	TotalTokenStake    *big.Int
}

// IBLSApkRegistryStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSApkRegistryStakeTotals struct {
	TotalEthStake   *big.Int
	TotalTokenStake *big.Int
}

// BLSApkRegistryMetaData contains all meta data concerning the BLSApkRegistry contract.
var BLSApkRegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"PUBKEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addSigner\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"apkG1\",\"inputs\":[],\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"apkHistory\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"apkHash\",\"type\":\"bytes24\",\"internalType\":\"bytes24\"},{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSignature\",\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structIBLSApkRegistry.SignatureCheckParams\",\"components\":[{\"name\":\"nonSignerPubKeysG1\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"totalEthStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"totalTokenStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBLSApkRegistry.StakeTotals\",\"components\":[{\"name\":\"totalEthStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"totalTokenStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPubKeyRegMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRegisteredPubKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_initialOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_whiteListManager\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_vrfManager\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"operatorToPubKey\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operatorToPubKeyHash\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pubKeyHashToOperator\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerPubKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structIBLSApkRegistry.PubKeyRegistrationParams\",\"components\":[{\"name\":\"pubKeyG1\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"pubKeyG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]},{\"name\":\"msgHash\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeSigner\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateWhitelist\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"isAdd\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"vrfManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"whitelist\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"whitelistManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PubKeyRegistration\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pubKeyG1\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"pubKeyG2\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SignerAdded\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pubKeyHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SignerRemoved\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"pubKeyHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]}]",
	Bin: "0x610160604052348015610010575f5ffd5b506040518060400160405280600e81526020017f424c5341706b52656769737472790000000000000000000000000000000000008152506040518060400160405280600681526020017f76302e302e3100000000000000000000000000000000000000000000000000008152506100905f8361013960201b90919060201c565b61012081815250506100ac60018261013960201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a081815250506100e961018660201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050506101346101e060201b60201c565b6108a5565b5f60208351101561015a57610153836102de60201b60201c565b9050610180565b8261016a8361034360201b60201c565b5f01908161017891906105cb565b5060ff5f1b90505b92915050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e0516101005146306040516020016101c5959493929190610700565b60405160208183030381529060405280519060200120905090565b5f6101ef61034c60201b60201c565b9050805f0160089054906101000a900460ff1615610239576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146102db5767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff6040516102d29190610773565b60405180910390a15b50565b5f5f829050601f8151111561032a57826040517f305a27a900000000000000000000000000000000000000000000000000000000815260040161032191906107f2565b60405180910390fd5b8051816103369061083f565b5f1c175f1b915050919050565b5f819050919050565b5f5f61035c61036560201b60201c565b90508091505090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005f1b905090565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061040957607f821691505b60208210810361041c5761041b6103c5565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261047e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610443565b6104888683610443565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6104cc6104c76104c2846104a0565b6104a9565b6104a0565b9050919050565b5f819050919050565b6104e5836104b2565b6104f96104f1826104d3565b84845461044f565b825550505050565b5f5f905090565b610510610501565b61051b8184846104dc565b505050565b5b8181101561053e576105335f82610508565b600181019050610521565b5050565b601f8211156105835761055481610422565b61055d84610434565b8101602085101561056c578190505b61058061057885610434565b830182610520565b50505b505050565b5f82821c905092915050565b5f6105a35f1984600802610588565b1980831691505092915050565b5f6105bb8383610594565b9150826002028217905092915050565b6105d48261038e565b67ffffffffffffffff8111156105ed576105ec610398565b5b6105f782546103f2565b610602828285610542565b5f60209050601f831160018114610633575f8415610621578287015190505b61062b85826105b0565b865550610692565b601f19841661064186610422565b5f5b8281101561066857848901518255600182019150602085019450602081019050610643565b868310156106855784890151610681601f891682610594565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b6106ac8161069a565b82525050565b6106bb816104a0565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106ea826106c1565b9050919050565b6106fa816106e0565b82525050565b5f60a0820190506107135f8301886106a3565b61072060208301876106a3565b61072d60408301866106a3565b61073a60608301856106b2565b61074760808301846106f1565b9695505050505050565b5f67ffffffffffffffff82169050919050565b61076d81610751565b82525050565b5f6020820190506107865f830184610764565b92915050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6107c48261038e565b6107ce818561078c565b93506107de81856020860161079c565b6107e7816107aa565b840191505092915050565b5f6020820190508181035f83015261080a81846107ba565b905092915050565b5f81519050919050565b5f819050602082019050919050565b5f610836825161069a565b80915050919050565b5f61084982610812565b826108538461081c565b905061085e8161082b565b9250602082101561089e576108997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802610443565b831692505b5050919050565b60805160a05160c05160e0516101005161012051610140516149146108f65f395f611bac01525f611b7101525f612ae101525f612ac001525f61247301525f6124c901525f6124f201526149145ff3fe608060405234801561000f575f5ffd5b5060043610610135575f3560e01c80638da5cb5b116100b6578063c0c53b8b1161007a578063c0c53b8b1461036d578063c1b39a3e14610389578063e9e70431146103a7578063eb12d61e146103d7578063ee7bb954146103f3578063f2fde38b1461042357610135565b80638da5cb5b146102b15780639b19251a146102cf5780639feab859146102ff578063ab44321b1461031d578063aeb561251461034e57610135565b8063562780aa116100fd578063562780aa146101f05780635fbbaed314610221578063626e0db514610251578063715018a61461028357806384b0196e1461028d57610135565b80630d392cd9146101395780630e316ab7146101555780631166f2e51461017157806326563b40146101a15780633df2cc7f146101bf575b5f5ffd5b610153600480360381019061014e9190612f19565b61043f565b005b61016f600480360381019061016a9190612f57565b610594565b005b61018b60048036038101906101869190612fb5565b6106bb565b6040516101989190612fef565b60405180910390f35b6101a96106eb565b6040516101b69190612fef565b60405180910390f35b6101d960048036038101906101d49190612f57565b610710565b6040516101e792919061305c565b60405180910390f35b61020a60048036038101906102059190612f57565b610809565b604051610218929190613092565b60405180910390f35b61023b60048036038101906102369190612f57565b610829565b60405161024891906130b9565b60405180910390f35b61026b600480360381019061026691906130fc565b610891565b60405161027a9392919061317f565b60405180910390f35b61028b6108ec565b005b6102956108ff565b6040516102a89796959493929190613306565b60405180910390f35b6102b96109a4565b6040516102c69190612fef565b60405180910390f35b6102e960048036038101906102e49190612f57565b6109d9565b6040516102f69190613397565b60405180910390f35b6103076109f6565b60405161031491906133b0565b60405180910390f35b610337600480360381019061033291906133ec565b610a1a565b604051610345929190613485565b60405180910390f35b610356610d36565b604051610364929190613092565b60405180910390f35b610387600480360381019061038291906134ac565b610d47565b005b610391610f52565b60405161039e9190612fef565b60405180910390f35b6103c160048036038101906103bc9190612f57565b610f77565b6040516103ce91906133b0565b60405180910390f35b6103f160048036038101906103ec9190612f57565b610f8c565b005b61040d600480360381019061040891906135e4565b6110ab565b60405161041a91906133b0565b60405180910390f35b61043d60048036038101906104389190612f57565b611568565b005b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c5906136a6565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390613734565b60405180910390fd5b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a9061379c565b60405180910390fd5b5f61062d82610710565b50905061064161063c826115ec565b6116a4565b7fb1f1ad61c87eb33969f3717ec91f75a19432c135305a6ddd31be811d821a95ef8260065f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546040516106af9291906137ba565b60405180910390a15050565b6007602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610718612d56565b5f5f60085f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060400160405290815f820154815260200160018201548152505090505f60065f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f5f1b81036107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f390613851565b60405180910390fd5b8181935093505050915091565b6008602052805f5260405f205f91509050805f0154908060010154905082565b610831612d56565b61088a6108857f2bd82124057f0913bc3b772ce7b83e8057c1ad1f3510fc83778be20f10ec5de68460405160200161086a92919061386f565b604051602081830303815290604052805190602001206118ed565b611906565b9050919050565b600581815481106108a0575f80fd5b905f5260205f20015f91509050805f015f9054906101000a900460401b90805f0160189054906101000a900463ffffffff1690805f01601c9054906101000a900463ffffffff16905083565b6108f4611a11565b6108fd5f611a98565b565b5f6060805f5f5f6060610910611b69565b610918611ba3565b46305f5f1b5f67ffffffffffffffff8111156109375761093661351f565b5b6040519080825280602002602001820160405280156109655781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f5f6109ae611bde565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6003602052805f5260405f205f915054906101000a900460ff1681565b7f2bd82124057f0913bc3b772ce7b83e8057c1ad1f3510fc83778be20f10ec5de681565b610a22612d6e565b5f4363ffffffff168510610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6290613906565b60405180910390fd5b5f84805f0190610a7b9190613930565b9050905060605f60405180604001604052805f81526020015f81525090505f831115610bda578267ffffffffffffffff811115610abb57610aba61351f565b5b604051908082528060200260200182016040528015610ae95781602001602082028036833780820191505090505b5091505f5f90505b83811015610bd457610b3788805f0190610b0b9190613930565b83818110610b1c57610b1b613992565b5b905060400201803603810190610b3291906139bf565b611c05565b838281518110610b4a57610b49613992565b5b602002602001018181525050610bc5610b9789805f0190610b6b9190613930565b84818110610b7c57610b7b613992565b5b905060400201803603810190610b9291906139bf565b6115ec565b60096040518060400160405290815f8201548152602001600182015481525050611c1d90919063ffffffff16565b91508080600101915050610af1565b50610bfd565b60096040518060400160405290815f820154815260200160018201548152505090505b5f5f610c508860096040518060400160405290815f82015481526020016001820154815250508b602001803603810190610c379190613aed565b8c60a001803603810190610c4b91906139bf565b611d16565b9150915081610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b90613b88565b60405180910390fd5b80610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb90613c16565b60405180910390fd5b5f8a85604051602001610ce8929190613d05565b6040516020818303038152906040528051906020012090505f60405180604001604052808c60e0013581526020018c6101000135815250905080829850985050505050505050935093915050565b6009805f0154908060010154905082565b5f610d50611e79565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f5f8267ffffffffffffffff16148015610d985750825b90505f60018367ffffffffffffffff16148015610dcb57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610dd9575080155b15610e10576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610e5d576001855f0160086101000a81548160ff0219169083151502179055505b610e6688611e8c565b8660025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610eee611ea0565b8315610f48575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610f3f9190613d81565b60405180910390a15b5050505050505050565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052805f5260405f205f915090505481565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461101b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110129061379c565b60405180910390fd5b5f61102582610710565b509050611031816116a4565b7fa4184cbb586001ae7ea6d4369622fcc496ba798090ac3aee79a03d81a289fe6d8260065f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205460405161109f9291906137ba565b60405180910390a15050565b5f60035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112c90613e30565b60405180910390fd5b5f611151845f0180360381019061114c91906139bf565b611c05565b90507fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb581036111b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ac90613ebe565b60405180910390fd5b5f5f1b60065f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205414611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d90613f72565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1660075f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cb90614026565b60405180910390fd5b5f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845f01518560200151875f015f0135885f0160200135896040015f018a6040016040018b60c0015f01358c60c0016020013560405160200161133f98979695949392919061405d565b604051602081830303815290604052805190602001205f1c611361919061411b565b90506113fd6113b061138e83885f0180360381019061138091906139bf565b611fc590919063ffffffff16565b8760c0018036038101906113a291906139bf565b611c1d90919063ffffffff16565b6113b8612099565b6113e46113d5856113c7612163565b611fc590919063ffffffff16565b88611c1d90919063ffffffff16565b886040018036038101906113f89190613aed565b612187565b61143c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611433906141e1565b60405180910390fd5b8160065f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508560075f8481526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550845f0160085f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20818161151991906142f1565b9050507ffbf769db9a1e2bc3eaec4ee908622e9979d4afce999833a2ead94668d8847b3086865f0187604001604051611554939291906143a9565b60405180910390a181925050509392505050565b611570611a11565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115e0575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016115d79190612fef565b60405180910390fd5b6115e981611a98565b50565b6115f4612d56565b5f825f015114801561160957505f8260200151145b1561162a5760405180604001604052805f81526020015f815250905061169f565b6040518060400160405280835f015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015161166e919061411b565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611699919061440b565b81525090505b919050565b5f60058054905090505f81036116ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e6906144ae565b60405180910390fd5b6117218260096040518060400160405290815f8201548152602001600182015481525050611c1d90919063ffffffff16565b60095f820151815f0155602082015181600101559050505f61176160096040518060400160405290815f8201548152602001600182015481525050611c05565b90505f6005600184611773919061440b565b8154811061178457611783613992565b5b905f5260205f200190504363ffffffff16815f0160189054906101000a900463ffffffff1663ffffffff16036117eb5781815f015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360401c02179055506118e7565b43815f01601c6101000a81548163ffffffff021916908363ffffffff160217905550600560405180606001604052808467ffffffffffffffff191681526020014363ffffffff1681526020015f63ffffffff16815250908060018154018082558091505060019003905f5260205f20015f909190919091505f820151815f015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360401c02179055506020820151815f0160186101000a81548163ffffffff021916908363ffffffff1602179055506040820151815f01601c6101000a81548163ffffffff021916908363ffffffff16021790555050505b50505050565b5f6118ff6118f9612470565b83612526565b9050919050565b61190e612d56565b5f5f90505f5f90505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47855f1c611945919061411b565b90505b6001156119f15761195881612566565b80935081945050507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061198f5761198e6140ee565b5b82830983036119b7576040518060400160405280828152602001838152509350505050611a0c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806119e6576119e56140ee565b5b600182089050611948565b60405180604001604052805f81526020015f81525093505050505b919050565b611a1961265b565b73ffffffffffffffffffffffffffffffffffffffff16611a376109a4565b73ffffffffffffffffffffffffffffffffffffffff1614611a9657611a5a61265b565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611a8d9190612fef565b60405180910390fd5b565b5f611aa1611bde565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6060611b9e5f7f000000000000000000000000000000000000000000000000000000000000000061266290919063ffffffff16565b905090565b6060611bd960017f000000000000000000000000000000000000000000000000000000000000000061266290919063ffffffff16565b905090565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f81515f52816020015160205260405f209050919050565b611c25612d56565b611c2d612d86565b835f0151815f60048110611c4457611c43613992565b5b602002018181525050836020015181600160048110611c6657611c65613992565b5b602002018181525050825f015181600260048110611c8757611c86613992565b5b602002018181525050826020015181600360048110611ca957611ca8613992565b5b6020020181815250505f60408360808460066107d05a03fa9050805f8103611ccd57fe5b5080611d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0590614516565b60405180910390fd5b505092915050565b5f5f5f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000187875f01518860200151885f01515f60028110611d5a57611d59613992565b5b6020020151895f0151600160028110611d7657611d75613992565b5b60200201518a602001515f60028110611d9257611d91613992565b5b60200201518b60200151600160028110611daf57611dae613992565b5b60200201518b5f01518c60200151604051602001611dd599989796959493929190614554565b604051602081830303815290604052805190602001205f1c611df7919061411b565b9050611e67611e21611e128389611fc590919063ffffffff16565b86611c1d90919063ffffffff16565b611e29612099565b611e5d611e4685611e38612163565b611fc590919063ffffffff16565b611e4f8c611906565b611c1d90919063ffffffff16565b886201d4c061270f565b80935081945050505094509492505050565b5f5f611e836129af565b90508091505090565b611e946129d8565b611e9d81612a18565b50565b5f60058054905014611ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ede90614666565b60405180910390fd5b600560405180606001604052805f60401b67ffffffffffffffff191681526020014363ffffffff1681526020015f63ffffffff16815250908060018154018082558091505060019003905f5260205f20015f909190919091505f820151815f015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360401c02179055506020820151815f0160186101000a81548163ffffffff021916908363ffffffff1602179055506040820151815f01601c6101000a81548163ffffffff021916908363ffffffff1602179055505050565b611fcd612d56565b611fd5612da8565b835f0151815f60038110611fec57611feb613992565b5b60200201818152505083602001518160016003811061200e5761200d613992565b5b602002018181525050828160026003811061202c5761202b613992565b5b6020020181815250505f60408360608460076107d05a03fa9050805f810361205057fe5b5080612091576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612088906146ce565b60405180910390fd5b505092915050565b6120a1612dca565b604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815250815250905090565b61216b612d56565b6040518060400160405280600181526020016002815250905090565b5f5f60405180604001604052808781526020018581525090505f60405180604001604052808781526020018581525090506121c0612df0565b5f5f90505b60028110156123de575f6006826121dc91906146ec565b90508482600281106121f1576121f0613992565b5b60200201515f0151835f83612206919061472d565b600c811061221757612216613992565b5b60200201818152505084826002811061223357612232613992565b5b6020020151602001518360018361224a919061472d565b600c811061225b5761225a613992565b5b60200201818152505083826002811061227757612276613992565b5b60200201515f01515f6002811061229157612290613992565b5b6020020151836002836122a4919061472d565b600c81106122b5576122b4613992565b5b6020020181815250508382600281106122d1576122d0613992565b5b60200201515f01516001600281106122ec576122eb613992565b5b6020020151836003836122ff919061472d565b600c81106123105761230f613992565b5b60200201818152505083826002811061232c5761232b613992565b5b6020020151602001515f6002811061234757612346613992565b5b60200201518360048361235a919061472d565b600c811061236b5761236a613992565b5b60200201818152505083826002811061238757612386613992565b5b6020020151602001516001600281106123a3576123a2613992565b5b6020020151836005836123b6919061472d565b600c81106123c7576123c6613992565b5b6020020181815250505080806001019150506121c5565b506123e7612e13565b5f6020826020600c028560086107d05a03fa9050805f810361240557fe5b5080612446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243d906147aa565b60405180910390fd5b5f825f6001811061245a57612459613992565b5b6020020151141595505050505050949350505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156124eb57507f000000000000000000000000000000000000000000000000000000000000000046145b15612518577f00000000000000000000000000000000000000000000000000000000000000009050612523565b612520612a9c565b90505b90565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f5f5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612598576125976140ee565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806125c9576125c86140ee565b5b867f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806125f9576125f86140ee565b5b888909090890505f61264c827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612b31565b90508181935093505050915091565b5f33905090565b606060ff5f1b831461267e5761267783612c78565b9050612709565b81805461268a906147f5565b80601f01602080910402602001604051908101604052809291908181526020018280546126b6906147f5565b80156127015780601f106126d857610100808354040283529160200191612701565b820191905f5260205f20905b8154815290600101906020018083116126e457829003601f168201915b505050505090505b92915050565b5f5f5f60405180604001604052808981526020018781525090505f6040518060400160405280898152602001878152509050612749612df0565b5f5f90505b6002811015612967575f60068261276591906146ec565b905084826002811061277a57612779613992565b5b60200201515f0151835f8361278f919061472d565b600c81106127a05761279f613992565b5b6020020181815250508482600281106127bc576127bb613992565b5b602002015160200151836001836127d3919061472d565b600c81106127e4576127e3613992565b5b602002018181525050838260028110612800576127ff613992565b5b60200201515f01515f6002811061281a57612819613992565b5b60200201518360028361282d919061472d565b600c811061283e5761283d613992565b5b60200201818152505083826002811061285a57612859613992565b5b60200201515f015160016002811061287557612874613992565b5b602002015183600383612888919061472d565b600c811061289957612898613992565b5b6020020181815250508382600281106128b5576128b4613992565b5b6020020151602001515f600281106128d0576128cf613992565b5b6020020151836004836128e3919061472d565b600c81106128f4576128f3613992565b5b6020020181815250508382600281106129105761290f613992565b5b60200201516020015160016002811061292c5761292b613992565b5b60200201518360058361293f919061472d565b600c81106129505761294f613992565b5b60200201818152505050808060010191505061274e565b50612970612e13565b5f6020826020600c028560088cfa9050805f835f6001811061299557612994613992565b5b602002015114159650965050505050509550959350505050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005f1b905090565b6129e0612cea565b612a16576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612a206129d8565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612a90575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612a879190612fef565b60405180910390fd5b612a9981611a98565b50565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001612b16959493929190614825565b60405160208183030381529060405280519060200120905090565b5f5f612b3b612e13565b612b43612e35565b6020815f60068110612b5857612b57613992565b5b602002018181525050602081600160068110612b7757612b76613992565b5b602002018181525050602081600260068110612b9657612b95613992565b5b6020020181815250508681600360068110612bb457612bb3613992565b5b6020020181815250508581600460068110612bd257612bd1613992565b5b6020020181815250508481600560068110612bf057612bef613992565b5b60200201818152505060208260c08360056107d05a03fa9250825f8103612c1357fe5b5082612c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4b906148c0565b60405180910390fd5b815f60018110612c6757612c66613992565b5b602002015193505050509392505050565b60605f612c8483612d08565b90505f602067ffffffffffffffff811115612ca257612ca161351f565b5b6040519080825280601f01601f191660200182016040528015612cd45781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f612cf3611e79565b5f0160089054906101000a900460ff16905090565b5f5f60ff835f1c169050601f811115612d4d576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b60405180604001604052805f81526020015f81525090565b60405180604001604052805f81526020015f81525090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060400160405280612ddd612e57565b8152602001612dea612e57565b81525090565b604051806101800160405280600c90602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060c00160405280600690602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612eb382612e8a565b9050919050565b612ec381612ea9565b8114612ecd575f5ffd5b50565b5f81359050612ede81612eba565b92915050565b5f8115159050919050565b612ef881612ee4565b8114612f02575f5ffd5b50565b5f81359050612f1381612eef565b92915050565b5f5f60408385031215612f2f57612f2e612e82565b5b5f612f3c85828601612ed0565b9250506020612f4d85828601612f05565b9150509250929050565b5f60208284031215612f6c57612f6b612e82565b5b5f612f7984828501612ed0565b91505092915050565b5f819050919050565b612f9481612f82565b8114612f9e575f5ffd5b50565b5f81359050612faf81612f8b565b92915050565b5f60208284031215612fca57612fc9612e82565b5b5f612fd784828501612fa1565b91505092915050565b612fe981612ea9565b82525050565b5f6020820190506130025f830184612fe0565b92915050565b5f819050919050565b61301a81613008565b82525050565b604082015f8201516130345f850182613011565b5060208201516130476020850182613011565b50505050565b61305681612f82565b82525050565b5f60608201905061306f5f830185613020565b61307c604083018461304d565b9392505050565b61308c81613008565b82525050565b5f6040820190506130a55f830185613083565b6130b26020830184613083565b9392505050565b5f6040820190506130cc5f830184613020565b92915050565b6130db81613008565b81146130e5575f5ffd5b50565b5f813590506130f6816130d2565b92915050565b5f6020828403121561311157613110612e82565b5b5f61311e848285016130e8565b91505092915050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082169050919050565b61315b81613127565b82525050565b5f63ffffffff82169050919050565b61317981613161565b82525050565b5f6060820190506131925f830186613152565b61319f6020830185613170565b6131ac6040830184613170565b949350505050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6131e8816131b4565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f613230826131ee565b61323a81856131f8565b935061324a818560208601613208565b61325381613216565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6132928383613011565b60208301905092915050565b5f602082019050919050565b5f6132b48261325e565b6132be8185613268565b93506132c983613278565b805f5b838110156132f95781516132e08882613287565b97506132eb8361329e565b9250506001810190506132cc565b5085935050505092915050565b5f60e0820190506133195f83018a6131df565b818103602083015261332b8189613226565b9050818103604083015261333f8188613226565b905061334e6060830187613083565b61335b6080830186612fe0565b61336860a083018561304d565b81810360c083015261337a81846132aa565b905098975050505050505050565b61339181612ee4565b82525050565b5f6020820190506133aa5f830184613388565b92915050565b5f6020820190506133c35f83018461304d565b92915050565b5f5ffd5b5f61012082840312156133e3576133e26133c9565b5b81905092915050565b5f5f5f6060848603121561340357613402612e82565b5b5f613410868287016130e8565b935050602084013567ffffffffffffffff81111561343157613430612e86565b5b61343d868287016133cd565b925050604061344e86828701612fa1565b9150509250925092565b604082015f82015161346c5f850182613011565b50602082015161347f6020850182613011565b50505050565b5f6060820190506134985f830185613458565b6134a5604083018461304d565b9392505050565b5f5f5f606084860312156134c3576134c2612e82565b5b5f6134d086828701612ed0565b93505060206134e186828701612ed0565b92505060406134f286828701612ed0565b9150509250925092565b5f6101008284031215613512576135116133c9565b5b81905092915050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61355582613216565b810181811067ffffffffffffffff821117156135745761357361351f565b5b80604052505050565b5f613586612e79565b9050613592828261354c565b919050565b5f604082840312156135ac576135ab61351b565b5b6135b6604061357d565b90505f6135c5848285016130e8565b5f8301525060206135d8848285016130e8565b60208301525092915050565b5f5f5f61016084860312156135fc576135fb612e82565b5b5f61360986828701612ed0565b935050602061361a868287016134fc565b92505061012061362c86828701613597565b9150509250925092565b7f424c5341706b52656769737472792e6f6e6c7957686974656c6973744d616e615f8201527f6765720000000000000000000000000000000000000000000000000000000000602082015250565b5f6136906023836131f8565b915061369b82613636565b604082019050919050565b5f6020820190508181035f8301526136bd81613684565b9050919050565b7f424c5341706b52656769737472792e75706461746557686974656c6973743a205f8201527f6f70657261746f722061646472657373206973207a65726f0000000000000000602082015250565b5f61371e6038836131f8565b9150613729826136c4565b604082019050919050565b5f6020820190508181035f83015261374b81613712565b9050919050565b7f424c5341706b52656769737472792e6f6e6c795672664d616e616765720000005f82015250565b5f613786601d836131f8565b915061379182613752565b602082019050919050565b5f6020820190508181035f8301526137b38161377a565b9050919050565b5f6040820190506137cd5f830185612fe0565b6137da602083018461304d565b9392505050565b7f424c5341706b52656769737472792e676574526567697374657265645075624b5f8201527f65793a206f70657261746f72206973206e6f7420726567697374657265640000602082015250565b5f61383b603e836131f8565b9150613846826137e1565b604082019050919050565b5f6020820190508181035f8301526138688161382f565b9050919050565b5f6040820190506138825f83018561304d565b61388f6020830184612fe0565b9392505050565b7f424c5341706b52656769737472792e636865636b5369676e61747572653a20695f8201527f6e76616c696420626c6f636b206e756d62657200000000000000000000000000602082015250565b5f6138f06033836131f8565b91506138fb82613896565b604082019050919050565b5f6020820190508181035f83015261391d816138e4565b9050919050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f8335600160200384360303811261394c5761394b613924565b5b80840192508235915067ffffffffffffffff82111561396e5761396d613928565b5b60208301925060408202360383131561398a5761398961392c565b5b509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f604082840312156139d4576139d3612e82565b5b5f6139e184828501613597565b91505092915050565b5f5ffd5b5f67ffffffffffffffff821115613a0857613a0761351f565b5b602082029050919050565b5f5ffd5b5f613a29613a24846139ee565b61357d565b90508060208402830185811115613a4357613a42613a13565b5b835b81811015613a6c5780613a5888826130e8565b845260208401935050602081019050613a45565b5050509392505050565b5f82601f830112613a8a57613a896139ea565b5b6002613a97848285613a17565b91505092915050565b5f60808284031215613ab557613ab461351b565b5b613abf604061357d565b90505f613ace84828501613a76565b5f830152506040613ae184828501613a76565b60208301525092915050565b5f60808284031215613b0257613b01612e82565b5b5f613b0f84828501613aa0565b91505092915050565b7f424c535369676e6174757265436865636b65722e636865636b5369676e6174755f8201527f7265733a20706172696e67206661696c65640000000000000000000000000000602082015250565b5f613b726032836131f8565b9150613b7d82613b18565b604082019050919050565b5f6020820190508181035f830152613b9f81613b66565b9050919050565b7f424c535369676e6174757265436865636b65722e636865636b5369676e6174755f8201527f7265733a207369676e617475726520697320696e76616c696400000000000000602082015250565b5f613c006039836131f8565b9150613c0b82613ba6565b604082019050919050565b5f6020820190508181035f830152613c2d81613bf4565b9050919050565b5f819050919050565b613c4e613c4982613008565b613c34565b82525050565b5f81519050919050565b5f81905092915050565b5f819050602082019050919050565b613c8081612f82565b82525050565b5f613c918383613c77565b60208301905092915050565b5f602082019050919050565b5f613cb382613c54565b613cbd8185613c5e565b9350613cc883613c68565b805f5b83811015613cf8578151613cdf8882613c86565b9750613cea83613c9d565b925050600181019050613ccb565b5085935050505092915050565b5f613d108285613c3d565b602082019150613d208284613ca9565b91508190509392505050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f819050919050565b5f613d6b613d66613d6184613d2c565b613d48565b613d35565b9050919050565b613d7b81613d51565b82525050565b5f602082019050613d945f830184613d72565b92915050565b7f424c5341706b52656769737472792e72656769737465725075624b65793a20745f8201527f6869732061646472657373206e6f7420617574686f72697a656420746f20726560208201527f676973746572207075626c6963206b6579000000000000000000000000000000604082015250565b5f613e1a6051836131f8565b9150613e2582613d9a565b606082019050919050565b5f6020820190508181035f830152613e4781613e0e565b9050919050565b7f424c5341706b52656769737472792e72656769737465725075624b65793a20745f8201527f686973207075626c6963206b65792068617368206973207a65726f0000000000602082015250565b5f613ea8603b836131f8565b9150613eb382613e4e565b604082019050919050565b5f6020820190508181035f830152613ed581613e9c565b9050919050565b7f424c5341706b52656769737472792e72656769737465725075624b65793a20745f8201527f686973206f70657261746f7220616c726561647920726567697374657220707560208201527f626c6963206b6579000000000000000000000000000000000000000000000000604082015250565b5f613f5c6048836131f8565b9150613f6782613edc565b606082019050919050565b5f6020820190508181035f830152613f8981613f50565b9050919050565b7f424c5341706b52656769737472792e72656769737465725075624b65793a20745f8201527f686973207075626c6963206b6579206861736820616c7265616479207265676960208201527f7374657265640000000000000000000000000000000000000000000000000000604082015250565b5f6140106046836131f8565b915061401b82613f90565b606082019050919050565b5f6020820190508181035f83015261403d81614004565b9050919050565b82818337505050565b61405960408383614044565b5050565b5f614068828b613c3d565b602082019150614078828a613c3d565b6020820191506140888289613c3d565b6020820191506140988288613c3d565b6020820191506140a8828761404d565b6040820191506140b8828661404d565b6040820191506140c88285613c3d565b6020820191506140d88284613c3d565b6020820191508190509998505050505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61412582613008565b915061413083613008565b9250826141405761413f6140ee565b5b828206905092915050565b7f424c5341706b52656769737472792e72656769737465725075624b65793a20735f8201527f69676e61747572652069732077726f6e67206f7220473120616e64204732207060208201527f75626c6963206b6579206e6f74206d6174636800000000000000000000000000604082015250565b5f6141cb6053836131f8565b91506141d68261414b565b606082019050919050565b5f6020820190508181035f8301526141f8816141bf565b9050919050565b5f813561420b816130d2565b80915050919050565b5f815f1b9050919050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61424a84614214565b9350801983169250808416831791505092915050565b5f61427a61427561427084613008565b613d48565b613008565b9050919050565b5f819050919050565b61429382614260565b6142a661429f82614281565b835461421f565b8255505050565b5f81015f8301806142bd816141ff565b90506142c9818461428a565b5050506001810160208301806142de816141ff565b90506142ea818461428a565b5050505050565b6142fb82826142ad565b5050565b5f61430d60208401846130e8565b905092915050565b604082016143255f8301836142ff565b6143315f850182613011565b5061433f60208301836142ff565b61434c6020850182613011565b50505050565b5f82905092915050565b61436860408383614044565b5050565b6080820161437c5f830183614352565b6143885f85018261435c565b506143966040830183614352565b6143a3604085018261435c565b50505050565b5f60e0820190506143bc5f830186612fe0565b6143c96020830185614315565b6143d6606083018461436c565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61441582613008565b915061442083613008565b9250828203905081811115614438576144376143de565b5b92915050565b7f424c5341706b52656769737472792e5f75706461746541706b3a2061706b206e5f8201527f6f74206578697374730000000000000000000000000000000000000000000000602082015250565b5f6144986029836131f8565b91506144a38261443e565b604082019050919050565b5f6020820190508181035f8301526144c58161448c565b9050919050565b7f65632d6164642d6661696c6564000000000000000000000000000000000000005f82015250565b5f614500600d836131f8565b915061450b826144cc565b602082019050919050565b5f6020820190508181035f83015261452d816144f4565b9050919050565b5f819050919050565b61454e61454982612f82565b614534565b82525050565b5f61455f828c61453d565b60208201915061456f828b613c3d565b60208201915061457f828a613c3d565b60208201915061458f8289613c3d565b60208201915061459f8288613c3d565b6020820191506145af8287613c3d565b6020820191506145bf8286613c3d565b6020820191506145cf8285613c3d565b6020820191506145df8284613c3d565b6020820191508190509a9950505050505050505050565b7f424c5341706b52656769737472792e696e697469616c697a6541706b3a2061705f8201527f6b20616c72656164792065786974730000000000000000000000000000000000602082015250565b5f614650602f836131f8565b915061465b826145f6565b604082019050919050565b5f6020820190508181035f83015261467d81614644565b9050919050565b7f65632d6d756c2d6661696c6564000000000000000000000000000000000000005f82015250565b5f6146b8600d836131f8565b91506146c382614684565b602082019050919050565b5f6020820190508181035f8301526146e5816146ac565b9050919050565b5f6146f682613008565b915061470183613008565b925082820261470f81613008565b91508282048414831517614726576147256143de565b5b5092915050565b5f61473782613008565b915061474283613008565b925082820190508082111561475a576147596143de565b5b92915050565b7f70616972696e672d6f70636f64652d6661696c656400000000000000000000005f82015250565b5f6147946015836131f8565b915061479f82614760565b602082019050919050565b5f6020820190508181035f8301526147c181614788565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061480c57607f821691505b60208210810361481f5761481e6147c8565b5b50919050565b5f60a0820190506148385f83018861304d565b614845602083018761304d565b614852604083018661304d565b61485f6060830185613083565b61486c6080830184612fe0565b9695505050505050565b7f424e3235342e6578704d6f643a2063616c6c206661696c7572650000000000005f82015250565b5f6148aa601a836131f8565b91506148b582614876565b602082019050919050565b5f6020820190508181035f8301526148d78161489e565b905091905056fea26469706673582212200799ecada5d7c500aa9a94904c16e32b3312f6967b190d2263a9d30d0a87b58664736f6c634300081d0033",
}

// BLSApkRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use BLSApkRegistryMetaData.ABI instead.
var BLSApkRegistryABI = BLSApkRegistryMetaData.ABI

// BLSApkRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BLSApkRegistryMetaData.Bin instead.
var BLSApkRegistryBin = BLSApkRegistryMetaData.Bin

// DeployBLSApkRegistry deploys a new Ethereum contract, binding an instance of BLSApkRegistry to it.
func DeployBLSApkRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BLSApkRegistry, error) {
	parsed, err := BLSApkRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BLSApkRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BLSApkRegistry{BLSApkRegistryCaller: BLSApkRegistryCaller{contract: contract}, BLSApkRegistryTransactor: BLSApkRegistryTransactor{contract: contract}, BLSApkRegistryFilterer: BLSApkRegistryFilterer{contract: contract}}, nil
}

// BLSApkRegistry is an auto generated Go binding around an Ethereum contract.
type BLSApkRegistry struct {
	BLSApkRegistryCaller     // Read-only binding to the contract
	BLSApkRegistryTransactor // Write-only binding to the contract
	BLSApkRegistryFilterer   // Log filterer for contract events
}

// BLSApkRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BLSApkRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BLSApkRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BLSApkRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BLSApkRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BLSApkRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BLSApkRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BLSApkRegistrySession struct {
	Contract     *BLSApkRegistry   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BLSApkRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BLSApkRegistryCallerSession struct {
	Contract *BLSApkRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BLSApkRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BLSApkRegistryTransactorSession struct {
	Contract     *BLSApkRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BLSApkRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BLSApkRegistryRaw struct {
	Contract *BLSApkRegistry // Generic contract binding to access the raw methods on
}

// BLSApkRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BLSApkRegistryCallerRaw struct {
	Contract *BLSApkRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// BLSApkRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BLSApkRegistryTransactorRaw struct {
	Contract *BLSApkRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBLSApkRegistry creates a new instance of BLSApkRegistry, bound to a specific deployed contract.
func NewBLSApkRegistry(address common.Address, backend bind.ContractBackend) (*BLSApkRegistry, error) {
	contract, err := bindBLSApkRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistry{BLSApkRegistryCaller: BLSApkRegistryCaller{contract: contract}, BLSApkRegistryTransactor: BLSApkRegistryTransactor{contract: contract}, BLSApkRegistryFilterer: BLSApkRegistryFilterer{contract: contract}}, nil
}

// NewBLSApkRegistryCaller creates a new read-only instance of BLSApkRegistry, bound to a specific deployed contract.
func NewBLSApkRegistryCaller(address common.Address, caller bind.ContractCaller) (*BLSApkRegistryCaller, error) {
	contract, err := bindBLSApkRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryCaller{contract: contract}, nil
}

// NewBLSApkRegistryTransactor creates a new write-only instance of BLSApkRegistry, bound to a specific deployed contract.
func NewBLSApkRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*BLSApkRegistryTransactor, error) {
	contract, err := bindBLSApkRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryTransactor{contract: contract}, nil
}

// NewBLSApkRegistryFilterer creates a new log filterer instance of BLSApkRegistry, bound to a specific deployed contract.
func NewBLSApkRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*BLSApkRegistryFilterer, error) {
	contract, err := bindBLSApkRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryFilterer{contract: contract}, nil
}

// bindBLSApkRegistry binds a generic wrapper to an already deployed contract.
func bindBLSApkRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BLSApkRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BLSApkRegistry *BLSApkRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BLSApkRegistry.Contract.BLSApkRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BLSApkRegistry *BLSApkRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.BLSApkRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BLSApkRegistry *BLSApkRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.BLSApkRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BLSApkRegistry *BLSApkRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BLSApkRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BLSApkRegistry *BLSApkRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BLSApkRegistry *BLSApkRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.contract.Transact(opts, method, params...)
}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) PUBKEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "PUBKEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) PUBKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _BLSApkRegistry.Contract.PUBKEYREGISTRATIONTYPEHASH(&_BLSApkRegistry.CallOpts)
}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) PUBKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _BLSApkRegistry.Contract.PUBKEYREGISTRATIONTYPEHASH(&_BLSApkRegistry.CallOpts)
}

// ApkG1 is a free data retrieval call binding the contract method 0xaeb56125.
//
// Solidity: function apkG1() view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistryCaller) ApkG1(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "apkG1")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ApkG1 is a free data retrieval call binding the contract method 0xaeb56125.
//
// Solidity: function apkG1() view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistrySession) ApkG1() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _BLSApkRegistry.Contract.ApkG1(&_BLSApkRegistry.CallOpts)
}

// ApkG1 is a free data retrieval call binding the contract method 0xaeb56125.
//
// Solidity: function apkG1() view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) ApkG1() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _BLSApkRegistry.Contract.ApkG1(&_BLSApkRegistry.CallOpts)
}

// ApkHistory is a free data retrieval call binding the contract method 0x626e0db5.
//
// Solidity: function apkHistory(uint256 ) view returns(bytes24 apkHash, uint32 updateBlockNumber, uint32 nextUpdateBlockNumber)
func (_BLSApkRegistry *BLSApkRegistryCaller) ApkHistory(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ApkHash               [24]byte
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "apkHistory", arg0)

	outstruct := new(struct {
		ApkHash               [24]byte
		UpdateBlockNumber     uint32
		NextUpdateBlockNumber uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ApkHash = *abi.ConvertType(out[0], new([24]byte)).(*[24]byte)
	outstruct.UpdateBlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.NextUpdateBlockNumber = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

// ApkHistory is a free data retrieval call binding the contract method 0x626e0db5.
//
// Solidity: function apkHistory(uint256 ) view returns(bytes24 apkHash, uint32 updateBlockNumber, uint32 nextUpdateBlockNumber)
func (_BLSApkRegistry *BLSApkRegistrySession) ApkHistory(arg0 *big.Int) (struct {
	ApkHash               [24]byte
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
}, error) {
	return _BLSApkRegistry.Contract.ApkHistory(&_BLSApkRegistry.CallOpts, arg0)
}

// ApkHistory is a free data retrieval call binding the contract method 0x626e0db5.
//
// Solidity: function apkHistory(uint256 ) view returns(bytes24 apkHash, uint32 updateBlockNumber, uint32 nextUpdateBlockNumber)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) ApkHistory(arg0 *big.Int) (struct {
	ApkHash               [24]byte
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
}, error) {
	return _BLSApkRegistry.Contract.ApkHistory(&_BLSApkRegistry.CallOpts, arg0)
}

// CheckSignature is a free data retrieval call binding the contract method 0xab44321b.
//
// Solidity: function checkSignature(uint256 blockNumber, ((uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint256,uint256) params, bytes32 msgHash) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) CheckSignature(opts *bind.CallOpts, blockNumber *big.Int, params IBLSApkRegistrySignatureCheckParams, msgHash [32]byte) (IBLSApkRegistryStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "checkSignature", blockNumber, params, msgHash)

	if err != nil {
		return *new(IBLSApkRegistryStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSApkRegistryStakeTotals)).(*IBLSApkRegistryStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignature is a free data retrieval call binding the contract method 0xab44321b.
//
// Solidity: function checkSignature(uint256 blockNumber, ((uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint256,uint256) params, bytes32 msgHash) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) CheckSignature(blockNumber *big.Int, params IBLSApkRegistrySignatureCheckParams, msgHash [32]byte) (IBLSApkRegistryStakeTotals, [32]byte, error) {
	return _BLSApkRegistry.Contract.CheckSignature(&_BLSApkRegistry.CallOpts, blockNumber, params, msgHash)
}

// CheckSignature is a free data retrieval call binding the contract method 0xab44321b.
//
// Solidity: function checkSignature(uint256 blockNumber, ((uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint256,uint256) params, bytes32 msgHash) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) CheckSignature(blockNumber *big.Int, params IBLSApkRegistrySignatureCheckParams, msgHash [32]byte) (IBLSApkRegistryStakeTotals, [32]byte, error) {
	return _BLSApkRegistry.Contract.CheckSignature(&_BLSApkRegistry.CallOpts, blockNumber, params, msgHash)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BLSApkRegistry *BLSApkRegistryCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BLSApkRegistry *BLSApkRegistrySession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BLSApkRegistry.Contract.Eip712Domain(&_BLSApkRegistry.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BLSApkRegistry.Contract.Eip712Domain(&_BLSApkRegistry.CallOpts)
}

// GetPubKeyRegMessageHash is a free data retrieval call binding the contract method 0x5fbbaed3.
//
// Solidity: function getPubKeyRegMessageHash(address operator) view returns((uint256,uint256))
func (_BLSApkRegistry *BLSApkRegistryCaller) GetPubKeyRegMessageHash(opts *bind.CallOpts, operator common.Address) (BN254G1Point, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "getPubKeyRegMessageHash", operator)

	if err != nil {
		return *new(BN254G1Point), err
	}

	out0 := *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)

	return out0, err

}

// GetPubKeyRegMessageHash is a free data retrieval call binding the contract method 0x5fbbaed3.
//
// Solidity: function getPubKeyRegMessageHash(address operator) view returns((uint256,uint256))
func (_BLSApkRegistry *BLSApkRegistrySession) GetPubKeyRegMessageHash(operator common.Address) (BN254G1Point, error) {
	return _BLSApkRegistry.Contract.GetPubKeyRegMessageHash(&_BLSApkRegistry.CallOpts, operator)
}

// GetPubKeyRegMessageHash is a free data retrieval call binding the contract method 0x5fbbaed3.
//
// Solidity: function getPubKeyRegMessageHash(address operator) view returns((uint256,uint256))
func (_BLSApkRegistry *BLSApkRegistryCallerSession) GetPubKeyRegMessageHash(operator common.Address) (BN254G1Point, error) {
	return _BLSApkRegistry.Contract.GetPubKeyRegMessageHash(&_BLSApkRegistry.CallOpts, operator)
}

// GetRegisteredPubKey is a free data retrieval call binding the contract method 0x3df2cc7f.
//
// Solidity: function getRegisteredPubKey(address operator) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) GetRegisteredPubKey(opts *bind.CallOpts, operator common.Address) (BN254G1Point, [32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "getRegisteredPubKey", operator)

	if err != nil {
		return *new(BN254G1Point), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// GetRegisteredPubKey is a free data retrieval call binding the contract method 0x3df2cc7f.
//
// Solidity: function getRegisteredPubKey(address operator) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) GetRegisteredPubKey(operator common.Address) (BN254G1Point, [32]byte, error) {
	return _BLSApkRegistry.Contract.GetRegisteredPubKey(&_BLSApkRegistry.CallOpts, operator)
}

// GetRegisteredPubKey is a free data retrieval call binding the contract method 0x3df2cc7f.
//
// Solidity: function getRegisteredPubKey(address operator) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) GetRegisteredPubKey(operator common.Address) (BN254G1Point, [32]byte, error) {
	return _BLSApkRegistry.Contract.GetRegisteredPubKey(&_BLSApkRegistry.CallOpts, operator)
}

// OperatorToPubKey is a free data retrieval call binding the contract method 0x562780aa.
//
// Solidity: function operatorToPubKey(address ) view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistryCaller) OperatorToPubKey(opts *bind.CallOpts, arg0 common.Address) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "operatorToPubKey", arg0)

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// OperatorToPubKey is a free data retrieval call binding the contract method 0x562780aa.
//
// Solidity: function operatorToPubKey(address ) view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistrySession) OperatorToPubKey(arg0 common.Address) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _BLSApkRegistry.Contract.OperatorToPubKey(&_BLSApkRegistry.CallOpts, arg0)
}

// OperatorToPubKey is a free data retrieval call binding the contract method 0x562780aa.
//
// Solidity: function operatorToPubKey(address ) view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) OperatorToPubKey(arg0 common.Address) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _BLSApkRegistry.Contract.OperatorToPubKey(&_BLSApkRegistry.CallOpts, arg0)
}

// OperatorToPubKeyHash is a free data retrieval call binding the contract method 0xe9e70431.
//
// Solidity: function operatorToPubKeyHash(address ) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) OperatorToPubKeyHash(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "operatorToPubKeyHash", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OperatorToPubKeyHash is a free data retrieval call binding the contract method 0xe9e70431.
//
// Solidity: function operatorToPubKeyHash(address ) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) OperatorToPubKeyHash(arg0 common.Address) ([32]byte, error) {
	return _BLSApkRegistry.Contract.OperatorToPubKeyHash(&_BLSApkRegistry.CallOpts, arg0)
}

// OperatorToPubKeyHash is a free data retrieval call binding the contract method 0xe9e70431.
//
// Solidity: function operatorToPubKeyHash(address ) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) OperatorToPubKeyHash(arg0 common.Address) ([32]byte, error) {
	return _BLSApkRegistry.Contract.OperatorToPubKeyHash(&_BLSApkRegistry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BLSApkRegistry *BLSApkRegistrySession) Owner() (common.Address, error) {
	return _BLSApkRegistry.Contract.Owner(&_BLSApkRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) Owner() (common.Address, error) {
	return _BLSApkRegistry.Contract.Owner(&_BLSApkRegistry.CallOpts)
}

// PubKeyHashToOperator is a free data retrieval call binding the contract method 0x1166f2e5.
//
// Solidity: function pubKeyHashToOperator(bytes32 ) view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCaller) PubKeyHashToOperator(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "pubKeyHashToOperator", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PubKeyHashToOperator is a free data retrieval call binding the contract method 0x1166f2e5.
//
// Solidity: function pubKeyHashToOperator(bytes32 ) view returns(address)
func (_BLSApkRegistry *BLSApkRegistrySession) PubKeyHashToOperator(arg0 [32]byte) (common.Address, error) {
	return _BLSApkRegistry.Contract.PubKeyHashToOperator(&_BLSApkRegistry.CallOpts, arg0)
}

// PubKeyHashToOperator is a free data retrieval call binding the contract method 0x1166f2e5.
//
// Solidity: function pubKeyHashToOperator(bytes32 ) view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) PubKeyHashToOperator(arg0 [32]byte) (common.Address, error) {
	return _BLSApkRegistry.Contract.PubKeyHashToOperator(&_BLSApkRegistry.CallOpts, arg0)
}

// VrfManager is a free data retrieval call binding the contract method 0xc1b39a3e.
//
// Solidity: function vrfManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCaller) VrfManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "vrfManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VrfManager is a free data retrieval call binding the contract method 0xc1b39a3e.
//
// Solidity: function vrfManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistrySession) VrfManager() (common.Address, error) {
	return _BLSApkRegistry.Contract.VrfManager(&_BLSApkRegistry.CallOpts)
}

// VrfManager is a free data retrieval call binding the contract method 0xc1b39a3e.
//
// Solidity: function vrfManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) VrfManager() (common.Address, error) {
	return _BLSApkRegistry.Contract.VrfManager(&_BLSApkRegistry.CallOpts)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_BLSApkRegistry *BLSApkRegistryCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "whitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_BLSApkRegistry *BLSApkRegistrySession) Whitelist(arg0 common.Address) (bool, error) {
	return _BLSApkRegistry.Contract.Whitelist(&_BLSApkRegistry.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _BLSApkRegistry.Contract.Whitelist(&_BLSApkRegistry.CallOpts, arg0)
}

// WhitelistManager is a free data retrieval call binding the contract method 0x26563b40.
//
// Solidity: function whitelistManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCaller) WhitelistManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "whitelistManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhitelistManager is a free data retrieval call binding the contract method 0x26563b40.
//
// Solidity: function whitelistManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistrySession) WhitelistManager() (common.Address, error) {
	return _BLSApkRegistry.Contract.WhitelistManager(&_BLSApkRegistry.CallOpts)
}

// WhitelistManager is a free data retrieval call binding the contract method 0x26563b40.
//
// Solidity: function whitelistManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) WhitelistManager() (common.Address, error) {
	return _BLSApkRegistry.Contract.WhitelistManager(&_BLSApkRegistry.CallOpts)
}

// AddSigner is a paid mutator transaction binding the contract method 0xeb12d61e.
//
// Solidity: function addSigner(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) AddSigner(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "addSigner", operator)
}

// AddSigner is a paid mutator transaction binding the contract method 0xeb12d61e.
//
// Solidity: function addSigner(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) AddSigner(operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.AddSigner(&_BLSApkRegistry.TransactOpts, operator)
}

// AddSigner is a paid mutator transaction binding the contract method 0xeb12d61e.
//
// Solidity: function addSigner(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) AddSigner(operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.AddSigner(&_BLSApkRegistry.TransactOpts, operator)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _initialOwner, address _whiteListManager, address _vrfManager) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) Initialize(opts *bind.TransactOpts, _initialOwner common.Address, _whiteListManager common.Address, _vrfManager common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "initialize", _initialOwner, _whiteListManager, _vrfManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _initialOwner, address _whiteListManager, address _vrfManager) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) Initialize(_initialOwner common.Address, _whiteListManager common.Address, _vrfManager common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.Initialize(&_BLSApkRegistry.TransactOpts, _initialOwner, _whiteListManager, _vrfManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _initialOwner, address _whiteListManager, address _vrfManager) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) Initialize(_initialOwner common.Address, _whiteListManager common.Address, _vrfManager common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.Initialize(&_BLSApkRegistry.TransactOpts, _initialOwner, _whiteListManager, _vrfManager)
}

// RegisterPubKey is a paid mutator transaction binding the contract method 0xee7bb954.
//
// Solidity: function registerPubKey(address operator, ((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)) params, (uint256,uint256) msgHash) returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryTransactor) RegisterPubKey(opts *bind.TransactOpts, operator common.Address, params IBLSApkRegistryPubKeyRegistrationParams, msgHash BN254G1Point) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "registerPubKey", operator, params, msgHash)
}

// RegisterPubKey is a paid mutator transaction binding the contract method 0xee7bb954.
//
// Solidity: function registerPubKey(address operator, ((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)) params, (uint256,uint256) msgHash) returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) RegisterPubKey(operator common.Address, params IBLSApkRegistryPubKeyRegistrationParams, msgHash BN254G1Point) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RegisterPubKey(&_BLSApkRegistry.TransactOpts, operator, params, msgHash)
}

// RegisterPubKey is a paid mutator transaction binding the contract method 0xee7bb954.
//
// Solidity: function registerPubKey(address operator, ((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)) params, (uint256,uint256) msgHash) returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) RegisterPubKey(operator common.Address, params IBLSApkRegistryPubKeyRegistrationParams, msgHash BN254G1Point) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RegisterPubKey(&_BLSApkRegistry.TransactOpts, operator, params, msgHash)
}

// RemoveSigner is a paid mutator transaction binding the contract method 0x0e316ab7.
//
// Solidity: function removeSigner(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) RemoveSigner(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "removeSigner", operator)
}

// RemoveSigner is a paid mutator transaction binding the contract method 0x0e316ab7.
//
// Solidity: function removeSigner(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) RemoveSigner(operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RemoveSigner(&_BLSApkRegistry.TransactOpts, operator)
}

// RemoveSigner is a paid mutator transaction binding the contract method 0x0e316ab7.
//
// Solidity: function removeSigner(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) RemoveSigner(operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RemoveSigner(&_BLSApkRegistry.TransactOpts, operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BLSApkRegistry *BLSApkRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RenounceOwnership(&_BLSApkRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RenounceOwnership(&_BLSApkRegistry.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.TransferOwnership(&_BLSApkRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.TransferOwnership(&_BLSApkRegistry.TransactOpts, newOwner)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0x0d392cd9.
//
// Solidity: function updateWhitelist(address operator, bool isAdd) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) UpdateWhitelist(opts *bind.TransactOpts, operator common.Address, isAdd bool) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "updateWhitelist", operator, isAdd)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0x0d392cd9.
//
// Solidity: function updateWhitelist(address operator, bool isAdd) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) UpdateWhitelist(operator common.Address, isAdd bool) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.UpdateWhitelist(&_BLSApkRegistry.TransactOpts, operator, isAdd)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0x0d392cd9.
//
// Solidity: function updateWhitelist(address operator, bool isAdd) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) UpdateWhitelist(operator common.Address, isAdd bool) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.UpdateWhitelist(&_BLSApkRegistry.TransactOpts, operator, isAdd)
}

// BLSApkRegistryEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the BLSApkRegistry contract.
type BLSApkRegistryEIP712DomainChangedIterator struct {
	Event *BLSApkRegistryEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryEIP712DomainChanged represents a EIP712DomainChanged event raised by the BLSApkRegistry contract.
type BLSApkRegistryEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*BLSApkRegistryEIP712DomainChangedIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryEIP712DomainChangedIterator{contract: _BLSApkRegistry.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryEIP712DomainChanged)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseEIP712DomainChanged(log types.Log) (*BLSApkRegistryEIP712DomainChanged, error) {
	event := new(BLSApkRegistryEIP712DomainChanged)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BLSApkRegistry contract.
type BLSApkRegistryInitializedIterator struct {
	Event *BLSApkRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryInitialized represents a Initialized event raised by the BLSApkRegistry contract.
type BLSApkRegistryInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*BLSApkRegistryInitializedIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryInitializedIterator{contract: _BLSApkRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryInitialized)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseInitialized(log types.Log) (*BLSApkRegistryInitialized, error) {
	event := new(BLSApkRegistryInitialized)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BLSApkRegistry contract.
type BLSApkRegistryOwnershipTransferredIterator struct {
	Event *BLSApkRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the BLSApkRegistry contract.
type BLSApkRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BLSApkRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryOwnershipTransferredIterator{contract: _BLSApkRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryOwnershipTransferred)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*BLSApkRegistryOwnershipTransferred, error) {
	event := new(BLSApkRegistryOwnershipTransferred)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistryPubKeyRegistrationIterator is returned from FilterPubKeyRegistration and is used to iterate over the raw logs and unpacked data for PubKeyRegistration events raised by the BLSApkRegistry contract.
type BLSApkRegistryPubKeyRegistrationIterator struct {
	Event *BLSApkRegistryPubKeyRegistration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryPubKeyRegistrationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryPubKeyRegistration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryPubKeyRegistration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryPubKeyRegistrationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryPubKeyRegistrationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryPubKeyRegistration represents a PubKeyRegistration event raised by the BLSApkRegistry contract.
type BLSApkRegistryPubKeyRegistration struct {
	Operator common.Address
	PubKeyG1 BN254G1Point
	PubKeyG2 BN254G2Point
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPubKeyRegistration is a free log retrieval operation binding the contract event 0xfbf769db9a1e2bc3eaec4ee908622e9979d4afce999833a2ead94668d8847b30.
//
// Solidity: event PubKeyRegistration(address operator, (uint256,uint256) pubKeyG1, (uint256[2],uint256[2]) pubKeyG2)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterPubKeyRegistration(opts *bind.FilterOpts) (*BLSApkRegistryPubKeyRegistrationIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "PubKeyRegistration")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryPubKeyRegistrationIterator{contract: _BLSApkRegistry.contract, event: "PubKeyRegistration", logs: logs, sub: sub}, nil
}

// WatchPubKeyRegistration is a free log subscription operation binding the contract event 0xfbf769db9a1e2bc3eaec4ee908622e9979d4afce999833a2ead94668d8847b30.
//
// Solidity: event PubKeyRegistration(address operator, (uint256,uint256) pubKeyG1, (uint256[2],uint256[2]) pubKeyG2)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchPubKeyRegistration(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryPubKeyRegistration) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "PubKeyRegistration")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryPubKeyRegistration)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "PubKeyRegistration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePubKeyRegistration is a log parse operation binding the contract event 0xfbf769db9a1e2bc3eaec4ee908622e9979d4afce999833a2ead94668d8847b30.
//
// Solidity: event PubKeyRegistration(address operator, (uint256,uint256) pubKeyG1, (uint256[2],uint256[2]) pubKeyG2)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParsePubKeyRegistration(log types.Log) (*BLSApkRegistryPubKeyRegistration, error) {
	event := new(BLSApkRegistryPubKeyRegistration)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "PubKeyRegistration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistrySignerAddedIterator is returned from FilterSignerAdded and is used to iterate over the raw logs and unpacked data for SignerAdded events raised by the BLSApkRegistry contract.
type BLSApkRegistrySignerAddedIterator struct {
	Event *BLSApkRegistrySignerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistrySignerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistrySignerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistrySignerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistrySignerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistrySignerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistrySignerAdded represents a SignerAdded event raised by the BLSApkRegistry contract.
type BLSApkRegistrySignerAdded struct {
	Operator   common.Address
	PubKeyHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSignerAdded is a free log retrieval operation binding the contract event 0xa4184cbb586001ae7ea6d4369622fcc496ba798090ac3aee79a03d81a289fe6d.
//
// Solidity: event SignerAdded(address operator, bytes32 pubKeyHash)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterSignerAdded(opts *bind.FilterOpts) (*BLSApkRegistrySignerAddedIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "SignerAdded")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistrySignerAddedIterator{contract: _BLSApkRegistry.contract, event: "SignerAdded", logs: logs, sub: sub}, nil
}

// WatchSignerAdded is a free log subscription operation binding the contract event 0xa4184cbb586001ae7ea6d4369622fcc496ba798090ac3aee79a03d81a289fe6d.
//
// Solidity: event SignerAdded(address operator, bytes32 pubKeyHash)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchSignerAdded(opts *bind.WatchOpts, sink chan<- *BLSApkRegistrySignerAdded) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "SignerAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistrySignerAdded)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "SignerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignerAdded is a log parse operation binding the contract event 0xa4184cbb586001ae7ea6d4369622fcc496ba798090ac3aee79a03d81a289fe6d.
//
// Solidity: event SignerAdded(address operator, bytes32 pubKeyHash)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseSignerAdded(log types.Log) (*BLSApkRegistrySignerAdded, error) {
	event := new(BLSApkRegistrySignerAdded)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "SignerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistrySignerRemovedIterator is returned from FilterSignerRemoved and is used to iterate over the raw logs and unpacked data for SignerRemoved events raised by the BLSApkRegistry contract.
type BLSApkRegistrySignerRemovedIterator struct {
	Event *BLSApkRegistrySignerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistrySignerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistrySignerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistrySignerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistrySignerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistrySignerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistrySignerRemoved represents a SignerRemoved event raised by the BLSApkRegistry contract.
type BLSApkRegistrySignerRemoved struct {
	Operator   common.Address
	PubKeyHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSignerRemoved is a free log retrieval operation binding the contract event 0xb1f1ad61c87eb33969f3717ec91f75a19432c135305a6ddd31be811d821a95ef.
//
// Solidity: event SignerRemoved(address operator, bytes32 pubKeyHash)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterSignerRemoved(opts *bind.FilterOpts) (*BLSApkRegistrySignerRemovedIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "SignerRemoved")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistrySignerRemovedIterator{contract: _BLSApkRegistry.contract, event: "SignerRemoved", logs: logs, sub: sub}, nil
}

// WatchSignerRemoved is a free log subscription operation binding the contract event 0xb1f1ad61c87eb33969f3717ec91f75a19432c135305a6ddd31be811d821a95ef.
//
// Solidity: event SignerRemoved(address operator, bytes32 pubKeyHash)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchSignerRemoved(opts *bind.WatchOpts, sink chan<- *BLSApkRegistrySignerRemoved) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "SignerRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistrySignerRemoved)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "SignerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignerRemoved is a log parse operation binding the contract event 0xb1f1ad61c87eb33969f3717ec91f75a19432c135305a6ddd31be811d821a95ef.
//
// Solidity: event SignerRemoved(address operator, bytes32 pubKeyHash)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseSignerRemoved(log types.Log) (*BLSApkRegistrySignerRemoved, error) {
	event := new(BLSApkRegistrySignerRemoved)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "SignerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
